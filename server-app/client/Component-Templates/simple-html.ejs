<% 
var belongsTo = [] , hasMany = [] , import_Models = [], rel = false , prop = [];

import_Models.push(model.name);
for (var count = 0 ;count < lb_relation.length ; count++){
 lb_relation[count].name =  lb_relation[count].name.charAt(0).toUpperCase() +  lb_relation[count].name.slice(1); 
 lb_relation[count].relations.model =  lb_relation[count].relations.model.charAt(0).toUpperCase() +  lb_relation[count].relations.model.slice(1);
}


for (var count = 0 ;count < lb_relation.length ; count++){
        for (var i = 0 ; i< lb_relation.length ; i++) { 
          if (model.name == lb_relation[count].name && lb_relation[count].relations.type == "belongsTo" && lb_relation[count].relations.model.toLowerCase() == lb_relation[i].name.toLowerCase() &&  lb_relation[i].relations.model.toLowerCase() == lb_relation[count].name.toLowerCase() && lb_relation[i].relations.type == "hasMany" ){
              belongsTo.push(lb_relation[count]);
              rel = false;
              for (var check =0 ;check< import_Models.length ; check++)
                if (import_Models[check] == lb_relation[count].relations.model)  rel = true;
              if (!rel) import_Models.push(lb_relation[count].relations.model);
            } 
             if (model.name == lb_relation[count].name && lb_relation[count].relations.type == "hasMany" &&  lb_relation[count].relations.model.toLowerCase() == lb_relation[i].name.toLowerCase() && lb_relation[count].relations.model.toLowerCase() == lb_relation[i].name.toLowerCase() &&  lb_relation[i].relations.model.toLowerCase() == lb_relation[count].name.toLowerCase() && lb_relation[i].relations.type == "belongsTo" && !("through" in lb_relation[count].relations) ){
              hasMany.push(lb_relation[count]);
               rel = false;
              for (var check =0 ;check< import_Models.length ; check++)
                if (import_Models[check] == lb_relation[count].relations.model)  rel = true;
              if (!rel) import_Models.push(lb_relation[count].relations.model);
            } 
    }
}
for (var j = 0 ;j< belongsTo.length ; j++){
  for (var i = 0 ;i< model_schema.length ; i++){
  if (belongsTo[j].relations.model.toLowerCase() == model_schema[i].name.toLowerCase() ) {prop.push(Object.keys(model_schema[i].properties)[0]);break;}
}}%>  

<html>
<head>
</head>
<body>
 <form (submit)="add<%= model.name %>()" class="form-inline">
 <%if (belongsTo.length > 0){for (var count = 0 ;count < belongsTo.length ; count++){%>
      <select [(ngModel)]="<%=model.name.toLowerCase()%>.<%= belongsTo[count].relations.model.toLowerCase()%>Id" name="<%=model.name.toLowerCase()%>" class="form-control" >
      <option *ngFor="let list of <%= belongsTo[count].relations.model.toLowerCase() %>s"  [ngValue]="<%= belongsTo[count].relations.model.toLowerCase()%>s.id" [attr.selected]="list.<%= belongsTo[count].relations.model.toLowerCase()%>Id==<%= belongsTo[count].relations.model.toLowerCase()%>s.id ? true : 0 ">{{list.<%= prop[count]%>}}</option>
     </select>
    <%}}%>
      <h1>
        <%= model.name %>
      </h1>
     
        <div class="input-group col-sm-5">
          <%for (let test in model.properties){if (!model.properties.hasOwnProperty(test)) continue; var models = model.properties[test];%><input class="form-control" type="<%= models.type%>" name="<%= (model.name).toLowerCase()%>" [(ngModel)]="<%= (model.name).toLowerCase()%>.<%= test%>"
              placeholder=" <%= test%>"><br>
            <%} %>
        </div>
        <div class="input-group">
          <button class="btn btn-primary">Submit</button>
        </div>
      </form>
</body>

</html>
