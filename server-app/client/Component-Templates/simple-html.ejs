<% var belongsTo = [] , hasMany = [] ,hasAndBelongsToMany = [], hasManyThrough = [], import_Models = [], rel = false, prop = [] , hasManyProp =[];
import_Models.push(model.name);
for (var count = 0 ;count < lb_relation.length ; count++){
 lb_relation[count].name =  lb_relation[count].name.charAt(0).toUpperCase() +  lb_relation[count].name.slice(1); 
 lb_relation[count].relations.model =  lb_relation[count].relations.model.charAt(0).toUpperCase() +  lb_relation[count].relations.model.slice(1);
}

for (var count = 0 ;count < lb_relation.length ; count++){
           if (model.name == lb_relation[count].name && lb_relation[count].relations.type == "belongsTo"){
              belongsTo.push(lb_relation[count]);
              rel = false;
              for (var check =0 ;check< import_Models.length ; check++)
                if (import_Models[check] == lb_relation[count].relations.model)  rel = true;
              if (!rel) import_Models.push(lb_relation[count].relations.model);
            } 
             if (model.name == lb_relation[count].name && lb_relation[count].relations.type == "hasMany"  && !("through" in lb_relation[count].relations)){
              hasMany.push(lb_relation[count]);
               rel = false;
              for (var check =0 ;check< import_Models.length ; check++)
                if (import_Models[check] == lb_relation[count].relations.model)  rel = true;
              if (!rel) import_Models.push(lb_relation[count].relations.model);
            }
             if (model.name == lb_relation[count].name && lb_relation[count].relations.type == "hasMany"  && ("through" in lb_relation[count].relations)){
              hasManyThrough.push(lb_relation[count]);
               rel = false;
              for (var check =0 ;check< import_Models.length ; check++)
                if (import_Models[check] == lb_relation[count].relations.model)  rel = true;
              if (!rel) import_Models.push(lb_relation[count].relations.model);
            } 
            if (model.name == lb_relation[count].name && lb_relation[count].relations.type == "hasAndBelongsToMany"){
              hasAndBelongsToMany.push(lb_relation[count]);
               rel = false;
              for (var check =0 ;check< import_Models.length ; check++)
                if (import_Models[check] == lb_relation[count].relations.model)  rel = true;
              if (!rel) import_Models.push(lb_relation[count].relations.model);
            }
}
for (var j = 0 ;j< belongsTo.length ; j++){
  for (var i = 0 ;i< model_schema.length ; i++){
  if (belongsTo[j].relations.model.toLowerCase() == model_schema[i].name.toLowerCase() ) {prop.push(Object.keys(model_schema[i].properties)[0]);break;}
}}
for(var i=0; i < hasMany.length ; i++){
   for (var j = 0 ;j< model_schema.length ; j++){
     if (hasMany[i].relations.model.toLowerCase() == model_schema[j].name.toLowerCase() ) {hasManyProp.push(Object.keys(model_schema[j].properties)[0]);break;}
}}%>
  <html>
  <head>
        <title><%= model.name %></title>
  </head>
  <body>
    <h1>
      <%= model.name %>
    </h1><%if (belongsTo.length > 0 && hasMany.length==0){%>
      <form (submit)="add<%= model.name %>()" class="form-inline"><%for (var count = 0 ;count < belongsTo.length ; count++){%>
          <div class="input-group col-sm-8">
             <label for="<%if(belongsTo[count].relations.foreignKey == ''){%><%= belongsTo[count].relations.model.toLowerCase()%>Id<%}else {%><%= belongsTo[count].relations.foreignKey %><%}%>"><%if(belongsTo[count].relations.foreignKey == ''){%><%= belongsTo[count].relations.model.toUpperCase()%><%}else {%><%= belongsTo[count].relations.foreignKey %><%}%></label>
            <select id="<%if(belongsTo[count].relations.foreignKey == ''){%><%= belongsTo[count].relations.model.toLowerCase()%>Id<%}else {%><%= belongsTo[count].relations.foreignKey %><%}%>" [(ngModel)]="<%=model.name.toLowerCase()%>.<%if(belongsTo[count].relations.foreignKey == ''){%><%= belongsTo[count].relations.model.toLowerCase()%>Id<%}else {%><%= belongsTo[count].relations.foreignKey %><%}%>" name="<%=model.name.toLowerCase()%>" class="form-control">
                  <option *ngFor="let list of <%= belongsTo[count].relations.model.toLowerCase() %>s"  [ngValue]="list.id" >{{list.<%= prop[count]%>}}</option>
            </select>
          </div><br /><%} for (let test in model.properties){if (!model.properties.hasOwnProperty(test)) continue; var models = model.properties[test];%>
            <div class="input-group col-sm-8">
                <label for="<%= test.toLowerCase()%>"><%= test.toUpperCase() %></label>
                <input class="form-control" type="<%= models.type%>" id="<%= test.toLowerCase() %>" name="<%=test.toLowerCase()%>" <%if (models.hasOwnProperty("required")){ if (models.required == true){%>required<%}}%> [(ngModel)]="<%= (model.name).toLowerCase()%>.<%= test%>" placeholder="<%= test.toUpperCase()%>" />
            </div><br /><%} %>
            <div class="input-group">
              <button class="btn btn-primary">Submit</button>
            </div>
      </form><%} if (belongsTo.length ==0 && hasMany.length == 0 && hasAndBelongsToMany.length == 0 && hasManyThrough.length == 0 ){%>
        <form (submit)="add<%= model.name %>()" class="form-inline">
          <div class="container"><%for (let test in model.properties){if (!model.properties.hasOwnProperty(test)) continue; var models = model.properties[test];%>
            <div class="input-group col-sm-8">
                <label for="<%= test.toLowerCase()%>"><%= test.toUpperCase() %></label>
                <input class="form-control" type="<%= models.type%>" id="<%= test.toLowerCase() %>" name="<%=test.toLowerCase()%>" <%if (models.hasOwnProperty("required")){ if (models.required == true){%>required<%}}%>  [(ngModel)]="<%= model.name.toLowerCase()%>.<%= test%>"placeholder=" <%= test.toUpperCase()%>" />
            </div><br /><%} %>
            <div class="input-group">
              <button class="btn btn-primary">Submit</button>
            </div>
          </div>
        </form>
        <%}if (hasMany.length > 0 ){%>
         <form class="form-inline" (submit)="create<%= hasMany[0].name%>s()"><%for (var x=0;x< belongsTo.length ; x++){%>
              <div class="input-group col-sm-8">
                <label for="<%if(belongsTo[x].relations.foreignKey == ''){%><%= belongsTo[x].relations.model.toLowerCase()%>Id<%}else {%><%= belongsTo[x].relations.foreignKey %><%}%>"><%if(belongsTo[x].relations.foreignKey == ''){%><%= belongsTo[x].relations.model.toUpperCase()%><%}else {%><%= belongsTo[x].relations.foreignKey %><%}%></label>
                <select id="<%if(belongsTo[x].relations.foreignKey == ''){%><%= belongsTo[x].relations.model.toLowerCase()%>Id<%}else {%><%= belongsTo[x].relations.foreignKey %><%}%>" [(ngModel)]="<%=model.name.toLowerCase()%>.<%if(belongsTo[x].relations.foreignKey == ''){%><%= belongsTo[x].relations.model.toLowerCase()%>Id<%}else {%><%= belongsTo[x].relations.foreignKey %><%}%>" name="<%=model.name.toLowerCase()%>" class="form-control">
                  <option *ngFor="let list of <%= belongsTo[x].relations.model.toLowerCase() %>s"  [ngValue]="list.id">{{list.<%= prop[count]%>}}</option>
                </select>
              </div><br /><%} for (let test in model.properties){if (!model.properties.hasOwnProperty(test)) continue; var models = model.properties[test];%>
                <div class="input-group col-sm-8">
                    <label for="<%= test.toLowerCase()%>"><%= test.toUpperCase() %></label>
                    <input class="form-control" type="<%= models.type%>" id="<%= test.toLowerCase() %>" name="<%=test.toLowerCase()%>" <%if (models.hasOwnProperty("required")){ if (models.required == true){%>required<%}}%>  [(ngModel)]="<%= model.name.toLowerCase()%>.<%= test%>" placeholder="<%= test.toUpperCase()%>">
                </div><br /><%} %>
                <% for (var count=0; count< hasMany.length ; count++){%>
                <div class="container ">
                  <table class="table table-hover">
                    <thead>
                      <tr>
                        <%= hasMany[count].relations.model %>s </tr>
                    </thead>
                    <tbody>
                      <div *ngFor="let list of <%= hasMany[count].relations.model.toLowerCase() %>Array ">
                        <div class="selected ">
                          <span>{{list.<%= hasManyProp[count] %>}}</span>
                          <a (click)="remove<%= hasMany[count].relations.model %>(<%= hasMany[count].relations.model.toLowerCase() %>) ">x</a>
                        </div>
                      </div>
                    </tbody>
                    <hr>
                    <tfoot>
                      <tr>
                        <div class="input-group">
                          <%for (var i=0; i< model_schema.length; i++){ if (model_schema[i].name.toLowerCase() == hasMany[count].relations.model.toLowerCase()){for (let test in model_schema[i].properties){if (! model_schema[i].properties.hasOwnProperty(test)) continue; var models=model_schema[i].properties[test];%>
                            <label for="<%= test.toLowerCase()%>"><%= test.toUpperCase() %></label>
                            <input class="form-control" type="<%= models.type%>" id="<%= test.toLowerCase() %>" name="<%=test.toLowerCase()%>" <%if (models.hasOwnProperty("required")){ if (models.required == true){%>required<%}}%> [(ngModel)]="<%= model_schema[i].name.toLowerCase()%>.<%= test%>" placeholder="<%= test.toUpperCase()%>">
                            <%}}}%>
                        </div><br />
                        <span class="input-group-addon" (click)="add<%= hasMany[count].relations.model %>()">Add</span>
                      </tr>
                    </tfoot>
                  </table>
                </div>
                <%}%>
                <div class="input-group ">
                   <button type="submit " class="btn btn-primary">Submit</button>
                </div>
          </form>
          <%}; if (hasManyThrough.length > 0){%>
          <div class="container">
                      <form (submit)="create<%= hasManyThrough[0].name %>()">
                        <%for (let test in model.properties){if (!model.properties.hasOwnProperty(test)) continue; var models = model.properties[test];%>
                          <label for="<%= test.toLowerCase()%>"><%= test.toUpperCase() %></label>
                          <input class="form-control" type="<%= models.type%>" id="<%= test.toLowerCase() %>" name="<%=test.toLowerCase()%>" <%if (models.hasOwnProperty("required")){ if (models.required == true){%>required<%}}%> [(ngModel)]="<%= model.name.toLowerCase()%>.<%= test%>" placeholder="<%= test.toUpperCase()%>">
                          <%}%><br /><% for (var count=0 ;count < hasManyThrough.length ; count++){%>
                            <strong><%= hasManyThrough[count].relations.model%></strong>
                            <div class="container">
                              <div style="max-height:200px; overflow: auto;margin:10px">
                                <table class="table table-stripped table-condensed tab-border">
                                  <thead>
                                    <tr>
                                      <th># ID</th><%for (var i=0; i< model_schema.length; i++){ if (model_schema[i].name.toLowerCase() == hasManyThrough[count].relations.model.toLowerCase()){for (let test in model_schema[i].properties){if (! model_schema[i].properties.hasOwnProperty(test)) continue;%>
                                        <th><%= test%></th><%}}}%>
                                        <th><input type="text" name="inputName" #inputName<%=count %> (keyup)=" <%= hasManyThrough[count].relations.model %>filtering(inputName<%=count %>.value)" /></th>
                                    </tr>
                                  </thead>
                                  <tbody>
                                    <tr *ngFor="let <%= hasManyThrough[count].relations.model.toLowerCase()%> of filter<%= hasManyThrough[count].relations.model %> let i=index">
                                      <td>{{<%= hasManyThrough[count].relations.model.toLowerCase()%>.id}}</td>
                                      <%for (var i=0; i< model_schema.length; i++){ if (model_schema[i].name.toLowerCase() == hasManyThrough[count].relations.model.toLowerCase()){for (let test in model_schema[i].properties){if (! model_schema[i].properties.hasOwnProperty(test)) continue;%>
                                        <td>{{<%= hasManyThrough[count].relations.model.toLowerCase()%>.<%= test%>}}</td><%}}}%>
                                          <td><input type="checkbox" class="checkBox" (change)="select<%= hasManyThrough[count].relations.model %>s($event , <%= hasManyThrough[count].relations.model.toLowerCase()%>.id)" name="chk" [(ngModel)]="checked<%= hasManyThrough[count].relations.model %>[i]"/></td>
                                    </tr>
                                  </tbody>
                                </table>
                              </div>
                            </div><%}%>
                            <button type=" " class="btn btn-primary ">Submit</button>
                      </form>
                    </div><%}if( hasAndBelongsToMany.length > 0 ){%>
                    <div class="container">
                      <form (submit)="create<%= hasAndBelongsToMany[0].name %>()"><%for (let test in model.properties){if (!model.properties.hasOwnProperty(test)) continue; var models = model.properties[test];%>
                          <label for="<%= test.toLowerCase()%>"><%= test.toUpperCase() %></label>
                          <input class="form-control" type="<%= models.type%>" id="<%= test.toLowerCase() %>" name="<%=test.toLowerCase()%>" <%if (models.hasOwnProperty("required")){ if (models.required == true){%>required<%}}%> [(ngModel)]="<%= model.name.toLowerCase()%>.<%= test%>" placeholder="<%= test.toUpperCase()%>">
                          <%}%><br /><% for (var count=0 ;count < hasAndBelongsToMany.length ; count++){%>
                            <strong><%= hasAndBelongsToMany[count].relations.model%></strong>
                            <div class="container">
                              <div style="max-height:200px; overflow: auto;margin:10px">
                                <table class="table table-stripped table-condensed tab-border">
                                  <thead>
                                    <tr>
                                      <th># ID</th><%for (var i=0; i< model_schema.length; i++){ if (model_schema[i].name.toLowerCase() == hasAndBelongsToMany[count].relations.model.toLowerCase()){for (let test in model_schema[i].properties){if (! model_schema[i].properties.hasOwnProperty(test)) continue;%>
                                        <th><%= test%></th><%}}}%>
                                        <th><input type="text" name="inputName" #inputName<%=count %> (keyup)=" <%= hasAndBelongsToMany[count].relations.model %>filtering(inputName<%=count %>.value)" /></th>
                                    </tr>
                                  </thead>
                                  <tbody>
                                    <tr *ngFor="let <%= hasAndBelongsToMany[count].relations.model.toLowerCase()%> of filter<%= hasAndBelongsToMany[count].relations.model %> let i=index">
                                      <td>{{<%= hasAndBelongsToMany[count].relations.model.toLowerCase()%>.id}}</td>
                                      <%for (var i=0; i< model_schema.length; i++){ if (model_schema[i].name.toLowerCase() == hasAndBelongsToMany[count].relations.model.toLowerCase()){for (let test in model_schema[i].properties){if (! model_schema[i].properties.hasOwnProperty(test)) continue;%>
                                        <td>{{<%= hasAndBelongsToMany[count].relations.model.toLowerCase()%>.<%= test%>}}</td><%}}}%>
                                          <td><input type="checkbox" class="checkBox" (change)="select<%= hasAndBelongsToMany[count].relations.model %>s($event , <%= hasAndBelongsToMany[count].relations.model.toLowerCase()%>.id)" name="chk" [(ngModel)]="checked<%= hasAndBelongsToMany[count].relations.model %>[i]"/></td>
                                    </tr>
                                  </tbody>
                                </table>
                              </div>
                            </div><%}%>
                            <button type=" " class="btn btn-primary ">Submit</button>
                      </form>
                    </div><%}%>
  </body>
  </html>
